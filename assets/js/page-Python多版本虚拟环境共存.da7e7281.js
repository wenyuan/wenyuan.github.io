(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{796:function(t,s,e){"use strict";e.r(s);var n=e(1),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"python-多版本虚拟环境共存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#python-多版本虚拟环境共存"}},[t._v("#")]),t._v(" Python 多版本虚拟环境共存")]),t._v(" "),e("blockquote",[e("p",[t._v("Windows 中要做到环境隔离，在使用 PyCharm 新建项目时直接选择 "),e("code",[t._v("New environment using [Options]")]),t._v(" 即可，本文主要针对 Linux 环境。")]),t._v(" "),e("p",[t._v("注意一下，下面这些操作，最好在 "),e("code",[t._v("root")]),t._v(" 用户下运行")])]),t._v(" "),e("h2",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),e("p",[t._v("在实际开发过程中，经常需要同时用到多个版本的 Python，并在各个版本之间来回切换。或者对相同的 Python 版本，在不同的项目中使用不同版本的软件包。")]),t._v(" "),e("p",[t._v("能够实现这种需求的工具有很多，简单做个选型对比：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"}},[t._v("pyenv"),e("OutboundLink")],1),t._v("：同时支持 Python2.X 和 Python3.X，但在 Python 3.7.3 中会警告说："),e("a",{attrs:{href:"https://docs.python.org/dev/whatsnew/3.6.html#id8",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个脚本是过时的，推荐使用 venv 命令"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("venv"),e("OutboundLink")],1),t._v("：Python3.3 之后标准库自带的虚拟环境创建和管理工具，在一定程度上能够替代 virtualenv 。但 venv 是 Python3.3 才有的，只能创建 Python3 的虚拟环境，Python2.X 不能使用。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/pypa/virtualenv",target:"_blank",rel:"noopener noreferrer"}},[t._v("virtualenv"),e("OutboundLink")],1),t._v("：是目前很流行的 Python 虚拟环境配置工具，同时支持 Python2.X 和 Python3.X，可以为每个虚拟环境指定 Python 解释器，并选择不继承基础版本的包。在当前的生产环境中还需要 Python2.X 的情况下推荐用这个。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://bitbucket.org/virtualenvwrapper/virtualenvwrapper/src/master/docs/source/index.rst?mode=view",target:"_blank",rel:"noopener noreferrer"}},[t._v("virtualenvwrapper"),e("OutboundLink")],1),t._v("：是对 virtualenv 的一个封装，目的是使后者更好用。不过似乎最近一次更新是在 2020 年，故不考虑使用了。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/pypa/pipenv",target:"_blank",rel:"noopener noreferrer"}},[t._v("pipenv"),e("OutboundLink")],1),t._v("：据说是集成了 pip，virtualenv 两者的功能，且完善了两者的一些缺陷（对于 virtualenv，主要是说用 virtualenv 管理 requirements.txt 文件可能会有问题，不过我的使用场景目前还没有遇到）。")])]),t._v(" "),e("p",[t._v("总结下来，如果完全不需要使用 Python 2.X 的话，可以考虑 venv。否则推荐 virtualenv 或者 pipenv（从 GitHub 看出，这两个工具是同一个组织在维护）。")]),t._v(" "),e("p",[t._v("我目前的需要是在系统中建立多个不同并且相互不干扰的 Python 运行环境，所以"),e("a",{attrs:{href:"https://packaging.python.org/en/latest/guides/tool-recommendations/#application-dependency-management",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于各方面考虑"),e("OutboundLink")],1),t._v("，选择了一个比较流行的虚拟环境工具：virtualenv，以后可能会顺便学习了解下 pipenv。")]),t._v(" "),e("h2",{attrs:{id:"安装-python"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-python"}},[t._v("#")]),t._v(" 安装 Python")]),t._v(" "),e("p",[t._v("如果你只是想基于系统默认的 Python 版本，对多个项目的依赖包环境进行隔离，则不需要另外安装其他版本的 Python。")]),t._v(" "),e("p",[t._v("如果你要想在多个 Python 版本之间进行切换，首先要确保你已经安装所需的 Python 版本（比如这里我需要 Python3.8）。")]),t._v(" "),e("p",[t._v("首先需要安装依赖组件，如果不安转的话后续在安装和使用 Python 时会报各种缺少依赖的错误（比如缺少 "),e("code",[t._v("_ctypes")]),t._v(" 等）")]),t._v(" "),e("ul",[e("li",[t._v("Ubuntu"),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" update -y\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y build-essential libncursesw5-dev libgdbm-dev libc6-dev zlib1g zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libffi-dev python3-dev python3-smbus\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])]),t._v(" "),e("li",[t._v("Centos"),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum update -y\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum groupinstall -y "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"development tools"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" zlib zlib-devel bzip2-devel openssl openssl-devel libffi-devel ncurses-devel xz-devel  python3-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel expat-devel\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])])]),t._v(" "),e("p",[t._v("现在开始正式安装 Python，先从 Python "),e("a",{attrs:{href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网下载"),e("OutboundLink")],1),t._v(" python3 源码安装包：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /opt\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果下载慢的话不如先下载到本地开发机器上，再上传到服务器")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" --no-check-certificate https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tgz\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("编译安装：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" /usr/bin/python3.8  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建安装 python 的文件夹")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /opt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -zxvf Python-3.8.9.tgz\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入到源码中")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" Python-3.8.9\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重要，指定 python 的安装路径，可以自己设置")]),t._v("\n./configure --prefix"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/bin/python3.8\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译安装")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装完，移除附带的文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /opt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf Python-3.8.9.tgz Python-3.8.9\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("因为后面是要在虚拟环境中使用这些另外安装的 Python 版本，所以就不配置 Python 环境变量了。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("小贴士")]),t._v(" "),e("p",[t._v("为了防止引起一些可能的问题，一般不建议卸载系统自带的 Python。")])]),t._v(" "),e("h2",{attrs:{id:"安装工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装工具"}},[t._v("#")]),t._v(" 安装工具")]),t._v(" "),e("p",[t._v("通过 pip 安装 virtualenv：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("pip3 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" virtualenv  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用 pip3 来安装不会有报错")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("测试安装结果：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("virtualenv --version\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"创建虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建虚拟环境"}},[t._v("#")]),t._v(" 创建虚拟环境")]),t._v(" "),e("p",[t._v("然后，假定我们要开发一个新的项目，需要一套独立的 Python 运行环境，可以这么做：")]),t._v(" "),e("p",[t._v("第一步，创建目录：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" my_project\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" my_project/\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("第二步，创建一个基于系统版本 Python 的独立运行环境，命名为 "),e("code",[t._v("venv")]),t._v("（可以是任意的，若省略名字将会把文件均放在当前目录）：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("virtualenv venv\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("可以选择指定的一个 Python 解释器（比如 "),e("code",[t._v("python3.8")]),t._v("）：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("virtualenv -p /usr/bin/python3.8/bin/python3.8 venv\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("命令 "),e("code",[t._v("virtualenv")]),t._v(" 就可以创建一个独立的 Python 运行环境，并且默认已经安装到系统 Python 环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的「干净」的 Python 运行环境。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("小贴士")]),t._v(" "),e("p",[t._v("在很多旧文章里面，会要你在执行上述命令时加上 "),e("code",[t._v("--no-site-packages")]),t._v(" 参数，表示不不复制系统 Python 环境中的所有第三方包。实际上在 virtualenv 版本 20 开始就默认这个参数了，加上反而会报错。")])]),t._v(" "),e("h2",{attrs:{id:"进入虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进入虚拟环境"}},[t._v("#")]),t._v(" 进入虚拟环境")]),t._v(" "),e("p",[t._v("新建的 Python 环境被放到当前目录下的 "),e("code",[t._v("venv")]),t._v(" 目录。有了 "),e("code",[t._v("venv")]),t._v(" 这个 Python 环境，要开始使用它，可以用 "),e("code",[t._v("source")]),t._v(" 进入该环境：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" venv/bin/activate\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("执行完命令后，可以观察到命令提示符变了，有个 "),e("code",[t._v("(venv)")]),t._v(" 前缀，表示当前环境是一个名为 "),e("code",[t._v("venv")]),t._v(" 的 Python 环境。")]),t._v(" "),e("p",[t._v("接下来就可以正常安装各种第三方包，并运行 Python 命令。")]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("venv")]),t._v(" 环境下，用 pip 安装的包都被安装到 "),e("code",[t._v("venv")]),t._v(" 这个环境下，系统 Python 环境不受任何影响。也就是说，"),e("code",[t._v("venv")]),t._v(" 环境是专门针对 "),e("code",[t._v("my_project")]),t._v(" 这个应用创建的。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("小贴士")]),t._v(" "),e("p",[t._v("在新建的 "),e("code",[t._v("venv")]),t._v(" 目录中，一开始有这三个文件：")]),t._v(" "),e("ul",[e("li",[t._v("bin：是启动相关的文件，包括启动脚本和解释器。启动脚本就是我们用来激活虚拟环境的脚本。")]),t._v(" "),e("li",[t._v("lib：保存的是库相关的东西。")]),t._v(" "),e("li",[t._v("pyvenv.cfg：该文件是这个虚拟环境的配置文件。")])])]),t._v(" "),e("h2",{attrs:{id:"退出虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#退出虚拟环境"}},[t._v("#")]),t._v(" 退出虚拟环境")]),t._v(" "),e("p",[t._v("如果要退出当前的 "),e("code",[t._v("venv")]),t._v(" 环境，使用 "),e("code",[t._v("deactivate")]),t._v(" 命令：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("deactivate\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("此时就回到了系统默认的 Python 解释器，包括已安装的库也会回到默认的。现在 "),e("code",[t._v("pip")]),t._v(" 或 "),e("code",[t._v("python")]),t._v(" 命令均是在系统 Python 环境下执行。")]),t._v(" "),e("p",[t._v("完全可以针对每个应用创建独立的 Python 运行环境，这样就可以对每个应用的 Python 环境进行隔离。")]),t._v(" "),e("h2",{attrs:{id:"删除虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除虚拟环境"}},[t._v("#")]),t._v(" 删除虚拟环境")]),t._v(" "),e("p",[t._v("要删除一个虚拟环境，只需删除它的文件夹。")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf venv\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("virtualenv 是如何创建「独立」的 Python 运行环境的呢？原理很简单，就是把系统 Python 复制一份到 virtualenv 的环境，用命令 "),e("code",[t._v("source venv/bin/activate")]),t._v(" 进入一个 virtualenv 环境时，virtualenv 会修改相关环境变量，让命令 "),e("code",[t._v("python")]),t._v(" 和 "),e("code",[t._v("pip")]),t._v(" 均指向当前的 virtualenv 环境。")]),t._v(" "),e("h2",{attrs:{id:"在-crontab-里运行虚拟环境中的脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-crontab-里运行虚拟环境中的脚本"}},[t._v("#")]),t._v(" 在 crontab 里运行虚拟环境中的脚本")]),t._v(" "),e("p",[t._v("很多时候我们需要设置一个 crontab 来运行 Python 脚本，而这个脚本又是在虚拟环境中的。这个时候需要在 crontab 语句中手动指定使用虚拟环境路径下的 "),e("code",[t._v("python")]),t._v(" 解释器，例如：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("*/1 * * * * /home/user/my_project/venv/bin/python3.8 /home/user/my_project/cron_script.py\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pipenv & 虚拟环境"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=a.exports}}]);