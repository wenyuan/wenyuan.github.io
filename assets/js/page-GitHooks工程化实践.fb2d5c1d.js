(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{1069:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"git-hooks-工程化实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks-工程化实践"}},[s._v("#")]),s._v(" Git Hooks 工程化实践")]),s._v(" "),n("p",[s._v("Git hooks 是前端工程化中非常重要的一环，也衍生出了很多相关的工具包，比如 husky、lint-staged、commitizen、commitlint 等，本文介绍下这些工具的使用以及原理。")]),s._v(" "),n("h2",{attrs:{id:"git-hooks-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-hooks-是什么"}},[s._v("#")]),s._v(" Git Hooks 是什么")]),s._v(" "),n("p",[s._v("hook 是计算机领域中一个很常见的概念，翻译过来的意思是钩子或者勾住，而在计算机领域中则要分为两种解释：")]),s._v(" "),n("ul",[n("li",[s._v("拦截消息，在消息到达目标前，提前对消息进行处理。")]),s._v(" "),n("li",[s._v("对特定的事件进行监听，当某个事件或动作被触发时也会同时触发对应的 hook。也就是说 hook 本身也是一段程序，只是它会在特定的时机被触发。")])]),s._v(" "),n("p",[s._v("Git Hooks 就是在运行某些 Git 命令时，被触发的对应的程序。")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),n("p",[s._v("在前端领域，钩子的概念也并不少见，比如 Vue 生命周期钩子、React Hooks、Webpack 钩子等，它们都是在特定的时机触发的方法或者函数。")])]),s._v(" "),n("h2",{attrs:{id:"常见的-git-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见的-git-hooks"}},[s._v("#")]),s._v(" 常见的 Git Hooks")]),s._v(" "),n("p",[s._v("Git Hooks 大体上分为两类：")]),s._v(" "),n("p",[n("strong",[s._v("客户端 hook")]),s._v("：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("pre-commit")]),s._v(" hook，在运行 "),n("code",[s._v("git commit")]),s._v(" 命令时且在 commit 完成前被触发。")]),s._v(" "),n("li",[n("code",[s._v("commit-msg")]),s._v(" hook，在编辑完 commit-msg 时被触发，并且接受一个参数，这个参数是存放当前 commit-msg 的临时文件的路径。")]),s._v(" "),n("li",[n("code",[s._v("pre-push")]),s._v(" hook，在运行 "),n("code",[s._v("git push")]),s._v(" 命令时且在 push 命令完成前被触发。")])]),s._v(" "),n("p",[n("strong",[s._v("服务端 hook")]),s._v("：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("pre-receive")]),s._v(" hook，在服务端接受到推送时且在推送过程完成前被触发。")]),s._v(" "),n("li",[n("code",[s._v("post-receive")]),s._v(" hook，在服务端接收到推送且推送完成后被触发。")])]),s._v(" "),n("p",[s._v("这里只列举了一部分，更多的 Git Hooks 详细信息见 "),n("a",{attrs:{href:"https://git-scm.com/docs/githooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("Git 官方文档"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("在本地 Git 仓库中的 "),n("code",[s._v(".git/hooks")]),s._v(" 文件夹中也可以看到常用的 Git Hooks 示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(".git/\n├── hooks\n│   │── applypatch-msg.sample\n│   │── commit-msg.sample\n│   │── fsmonitor-watchman.sample\n│   │── post-update.sample\n│   │── pre-applypatch.sample\n│   │── pre-commit.sample\n│   │── pre-merge-commit.sample\n│   │── pre-push.sample\n│   │── pre-rebase.sample\n│   │── pre-receive.sample\n│   │── prepare-commit-msg.sample\n│   │── push-to-checkout.sample\n│   └── update.sample\n└── ...\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("它们默认都是 shell 脚本，只需要将示例文件的 "),n("code",[s._v(".sample")]),s._v(" 扩展名去掉，那么示例文件即可生效。")]),s._v(" "),n("p",[s._v("一般来说，在前端工程中应用 Git Hooks 都是运行 javaScript 脚本，就像这样：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("node")]),s._v(" your/path/to/script/xxx.js\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("或者是这样：")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token hashbang comment"}},[s._v("#!/usr/bin/env node")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// your javascript code ...")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"原生的-git-hooks-的缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原生的-git-hooks-的缺陷"}},[s._v("#")]),s._v(" 原生的 Git Hooks 的缺陷")]),s._v(" "),n("p",[s._v("原生的 Git Hooks 有一个比较大的问题是 "),n("code",[s._v(".git")]),s._v(" 文件夹下的内容不会被 Git 追踪。这就表示，无法保证让一个仓库中所有的成员都使用同样的 Git Hooks，除非仓库的所有成员都手动同步同一份 Git Hooks，但这显然不是个好办法。")]),s._v(" "),n("h2",{attrs:{id:"husky-及相关工具库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#husky-及相关工具库"}},[s._v("#")]),s._v(" Husky 及相关工具库")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("husky")]),s._v("：Git Hooks 工具\n"),n("ul",[n("li",[s._v("对 Git 执行的一些命令，通过对应的 Hooks 钩子触发，执行自定义的脚本程序。")])])]),s._v(" "),n("li",[n("strong",[s._v("lint-staged")]),s._v("：检测文件插件\n"),n("ul",[n("li",[s._v("只检测 "),n("code",[s._v("git add .")]),s._v(" 中暂存区的文件，对过滤出的文件执行脚本。")])])]),s._v(" "),n("li",[n("strong",[s._v("commitizen")]),s._v("：代码提交内容标准化\n"),n("ul",[n("li",[s._v("提示定义输入标准的 "),n("code",[s._v("git commit")]),s._v(" 内容。")])])]),s._v(" "),n("li",[n("strong",[s._v("commitlint")]),s._v("：代码提交检测\n"),n("ul",[n("li",[s._v("检测 "),n("code",[s._v("git commit")]),s._v(" 内容是否符合定义的规范。")])])])]),s._v(" "),n("h3",{attrs:{id:"husky"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#husky"}},[s._v("#")]),s._v(" husky")]),s._v(" "),n("h4",{attrs:{id:"_1-安装-husky"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-husky"}},[s._v("#")]),s._v(" 1）安装 husky：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" husky --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_2-在-packgae-json-中添加-prepare-脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-在-packgae-json-中添加-prepare-脚本"}},[s._v("#")]),s._v(" 2）在 packgae.json 中添加 prepare 脚本：")]),s._v(" "),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"prepare"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"husky install"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("prepare 脚本会在 "),n("code",[s._v("npm install")]),s._v("（不带参数）之后自动执行。也就是说当我们执行 "),n("code",[s._v("npm install")]),s._v(" 安装完项目依赖后会执行 "),n("code",[s._v("husky install")]),s._v(" 命令，该命令会创建 "),n("code",[s._v(".husky/")]),s._v(" 目录并指定该目录为 Git Hooks 所在的目录。")]),s._v(" "),n("h4",{attrs:{id:"_3-添加-git-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加-git-hooks"}},[s._v("#")]),s._v(" 3）添加 Git Hooks：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("npx husky "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${hook_name}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${command}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 例如：")]),s._v("\nnpx husky "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/pre-commit "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npm run test"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("运行完该示例命令后我们会看到 "),n("code",[s._v(".husky/")]),s._v(" 目录下新增了一个名为 "),n("code",[s._v("pre-commit")]),s._v(" 的 shell 脚本。该脚本的功能就是在执行 "),n("code",[s._v("git commit")]),s._v(" 命令时会先执行 "),n("code",[s._v("npm run test")]),s._v(" 这个命令。")]),s._v(" "),n("h3",{attrs:{id:"lint-staged"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[s._v("#")]),s._v(" lint-staged")]),s._v(" "),n("p",[s._v("在 "),n("code",[s._v("pre-commit")]),s._v(" hook 中，一般来说都是对当前要 "),n("code",[s._v("commit")]),s._v(" 的文件进行校验、格式化等，因此在脚本中我们需要知道当前在 Git 暂存区的文件有哪些，而 Git 本身也没有向 pre-commit 脚本传递相关参数，"),n("code",[s._v("lint-staged")]),s._v(" 这个包为我们解决了这个问题。")]),s._v(" "),n("h4",{attrs:{id:"_1-安装-lint-staged"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-lint-staged"}},[s._v("#")]),s._v(" 1）安装 lint-staged：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" lint-staged --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_2-添加-git-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加-git-hooks"}},[s._v("#")]),s._v(" 2）添加 Git Hooks：")]),s._v(" "),n("p",[s._v("在搭配 Husky 使用的情况下，可以运行下面的命令，在 "),n("code",[s._v("pre-commit")]),s._v(" hook 中运行 "),n("code",[s._v("lint-staged")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("npx husky "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/pre-commit "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"npx lint-staged"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_3-配置-lint-staged"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置-lint-staged"}},[s._v("#")]),s._v(" 3）配置 lint-staged：")]),s._v(" "),n("p",[s._v("关于 lint-staged 的配置，在形式上与常见的工具包的配置方式大同小异，可以通过在 "),n("code",[s._v("package.json")]),s._v(" 中添加一个 "),n("code",[s._v("lint-staged")]),s._v(" 项、也可以在根目录添加一个 "),n("code",[s._v(".lintstagedrc.json")]),s._v(" 文件等，下面以在 package.json 中配置为例：")]),s._v(" "),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint-staged"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"glob pattern"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your-cmd"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("配置项中的 key 为 glob 模式匹配语句，值为要运行的命令（可以配置命令），例如想要为暂存区中 "),n("code",[s._v("src")]),s._v(" 文件夹下所有的 "),n("code",[s._v(".ts")]),s._v(" 和 "),n("code",[s._v(".tsx")]),s._v(" 文件运行 eslint 检查以及 ts 类型检查，那么配置如下：")]),s._v(" "),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"lint-staged"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"src/**/*.{ts,tsx}"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eslint"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tsc"')]),s._v("  \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),n("p",[s._v("lint-staged 是如何知道当前暂存区有哪些文件的？")]),s._v(" "),n("p",[s._v("事实上，lint-staged 中也没有什么黑魔法，它在内部运行了 "),n("code",[s._v("git diff --staged --diff-filter=ACMR --name-only -z")]),s._v(" 命令，这个命令会返回暂存区的文件信息，类似如下所示的代码：")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" execSync "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'child_process'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" lines "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("execSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git diff --staged --diff-filter=ACMR --name-only -z'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" stagedFiles "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" lines\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token regex"}},[n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\u0000$")]),n("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\u0000'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"commitizen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commitizen"}},[s._v("#")]),s._v(" commitizen")]),s._v(" "),n("p",[s._v("在使用 Git 过程中，不可避免的需要填写 commit message，这其实是一件相当令人头疼的事情。如果没有良好的 "),n("RouterLink",{attrs:{to:"/style-guide/version-control/git-commit-message/"}},[s._v("commit message 规范")]),s._v("，那么在查看历史 commit 的时候只会一脸懵。")],1),s._v(" "),n("p",[s._v("而 "),n("code",[s._v("commitizen")]),s._v(" 可以协助开发者填写 commit 信息")]),s._v(" "),n("h4",{attrs:{id:"_1-安装-commitizen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-commitizen"}},[s._v("#")]),s._v(" 1）安装 commitizen")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" commitizen --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_2-初始化-commitizen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化-commitizen"}},[s._v("#")]),s._v(" 2）初始化 commitizen")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("npx commitizen init cz-conventional-changelog --save-dev --save-exact\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这个初始化命令做了下面三件事：")]),s._v(" "),n("ul",[n("li",[s._v("安装 "),n("code",[s._v("cz-conventional-changelog")]),s._v(" 适配器 npm 模块")]),s._v(" "),n("li",[s._v("将其保存到 package.json 的 devDependencies 中")]),s._v(" "),n("li",[s._v("config.commitizen 配置添加到 package.json 中 如下所示："),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"config"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"commitizen"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"path"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./node_modules/cz-conventional-changelog"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])]),s._v(" "),n("p",[n("code",[s._v("commitizen")]),s._v(" 本身只提供命令行交互框架以及一些 Git 命令的执行，实际的规则则需要通过适配器来定义，commitizen 留有对应的适配器接口。而 "),n("code",[s._v("cz-conventional-changelog")]),s._v(" 就是一个 commitizen 适配器。")]),s._v(" "),n("p",[s._v("此时运行 "),n("code",[s._v("npx cz")]),s._v(" 命令（注意不能用 Git Bash 来运行，那个无法进行上下键选择，用 Win10 的 PowerShell），就会出现以下命令行交互界面：")]),s._v(" "),n("div",{staticStyle:{"text-align":"center"}},[n("img",{attrs:{src:a(674),alt:"npx cz 命令行交互页面"}}),s._v(" "),n("p",{staticStyle:{"text-align":"center",color:"#888"}},[s._v("（npx cz 命令行交互页面）")])]),s._v(" "),n("p",[s._v("这个适配器生成的 commit message 模板如下：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("scope"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("subject"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("空行"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("body"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("空行"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("footer"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这也是最常见的提交约定，当然也可以安装其他适配器，或者自定义适配器来定制自己想要的 commit message 模板。")]),s._v(" "),n("p",[s._v("当运行 "),n("code",[s._v("npx cz")]),s._v("，commitizen 在通过适配器模板以及用户的输入拿到最终的 commit message 后，会在内部运行 "),n("code",[s._v('git commit -m "XXX" 命令')]),s._v("，到此为止，就完成了一次 "),n("code",[s._v("git commit")]),s._v(" 操作。")]),s._v(" "),n("p",[s._v("官方的文档中会推荐在 "),n("code",[s._v("package.json")]),s._v(" 的 "),n("code",[s._v("scripts")]),s._v(" 中添加如下内容：")]),s._v(" "),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[s._v("commit"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cz"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这样就可以使用 "),n("code",[s._v("npm run commit")]),s._v(" 来运行 commitizen 了。")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),n("p",[s._v("如果想自定义适配器，那么可以选择使用 "),n("a",{attrs:{href:"https://www.npmjs.com/package/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[s._v("cz-customizable"),n("OutboundLink")],1),s._v(" 这个工具包。")]),s._v(" "),n("p",[s._v("使用时：")]),s._v(" "),n("ul",[n("li",[s._v("先进行 commitizen 配置"),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"config"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"commitizen"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"path"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./node_modules/cz-customizable"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("li",[s._v("cz-customizable 配置，在根目录新增一个 "),n("code",[s._v(".cz-config.js")]),s._v(" 文件，配置示例参考：\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[s._v("配置"),n("OutboundLink")],1)])])])])]),s._v(" "),n("h3",{attrs:{id:"commitlint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commitlint"}},[s._v("#")]),s._v(" commitlint")]),s._v(" "),n("p",[n("code",[s._v("commitlint")]),s._v(" 这个工具库，可以通过配置一些规则来校验 commit message 是否规范。")]),s._v(" "),n("p",[s._v("那么我们已经有了 commitizen 为什么还需要 commitlint 呢？")]),s._v(" "),n("p",[s._v("commitizen 的作用是协助开发者填写 commit message，虽然可以通过选择不同的适配器或者自定义适配器来制定对应的 commit 信息规范以及模板，但是缺少了对 commit message 的校验功能，开发者仍然可能在无意中使用原生的 "),n("code",[s._v("git commit")]),s._v(" 命令来提交，而 "),n("code",[s._v("commitlint")]),s._v(" 在 "),n("code",[s._v("commit-msg")]),s._v(" 这个 git hook 中对 commit message 进行校验，正好解决了这个问题。")]),s._v(" "),n("h4",{attrs:{id:"_1-安装-commitlint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装-commitlint"}},[s._v("#")]),s._v(" 1）安装 commitlint")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" @commitlint/config-conventional @commitlint/cli --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_2-使用-husky-添加-commit-msg-hook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-husky-添加-commit-msg-hook"}},[s._v("#")]),s._v(" 2）使用 husky 添加 commit-msg hook")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("npx husky "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" .husky/commit-msg "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'npx --no -- commitlint --edit $1'")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"_3-commitlint-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-commitlint-配置"}},[s._v("#")]),s._v(" 3）commitlint 配置")]),s._v(" "),n("p",[s._v("在项目根目录增加一个 "),n("code",[s._v("commitlint.config.js")]),s._v(" 文件，文件内容如下：")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("module"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'@commitlint/config-conventional'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自定义部分规则")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("rules")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'scope-case'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'always'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'camel-case'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'scope-empty'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'never'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'scope-enum'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'always'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("commitlint 与 commitizen 一样，分为两部分，一部分是执行的主程序，另一部分是规则或者说是适配器。"),n("code",[s._v("@commitlint/cli")]),s._v(" 是执行的主程序，"),n("code",[s._v("@commitlint/config-conventional")]),s._v(" 则是规则。commitlint 和 commitizen 分别采用了策略模式和适配器模式，因此有非常高的可用性和良好的扩展性。")]),s._v(" "),n("p",[s._v("在 commitlint 的配置文件中，可以先引用一个 commitlint 规则包，然后在定义部分自己想要的规则，就像 eslint 的配置一样。")]),s._v(" "),n("p",[s._v("需要注意的是，在将 commitlint 添加到 commit-msg hooks 中时，执行 commitlint 的 shell 命令中 "),n("code",[s._v("--edit $1")]),s._v(" 参数是必须的，这个参数的意思是：存储 commit message 的临时文件路径是 "),n("code",[s._v("$1")]),s._v(", 而 "),n("code",[s._v("$1")]),s._v(" 则是 Git 传给 commit-msg hook 的参数，它的值是 commit message 的临时存储文件的路径，默认情况下是 "),n("code",[s._v(".git/COMMIT_EDITMSG")]),s._v("。如果不传这个参数，那么 commitlint 将无法得知当前的 commit message 是什么。")]),s._v(" "),n("p",[s._v("更多 commitlint 的相关详情看"),n("a",{attrs:{href:"https://commitlint.js.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"_4-commitlint-与-commitizen-的配置共用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-commitlint-与-commitizen-的配置共用"}},[s._v("#")]),s._v(" 4）commitlint 与 commitizen 的配置共用")]),s._v(" "),n("p",[s._v("前文中说到 commitlint 解决了 commitizen 没有对 commit message 做校验的问题，但是使用了 commitlint 后，新的问题出现了，如果 commitlint 的规则集与 commitizen 的适配器中的规则不一致，那么可能会导致使用 commitizen 生成的 commit message 被 commitlint 校验时不通过从而 git commit 失败。\n解决这个问题的办法有两种：")]),s._v(" "),n("ul",[n("li",[s._v("将 commitizen 的适配器规则翻译为 commitlint 规则集，已有的对应工具包为 "),n("a",{attrs:{href:"https://www.npmjs.com/package/commitlint-config-cz",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("commitlint-config-cz")]),n("OutboundLink")],1),s._v("，这个包需要你所使用的 commitizen 适配器为 "),n("code",[s._v("cz-customizable")]),s._v("，也就是自定义适配器。")]),s._v(" "),n("li",[s._v("将 commitlint 规则集转化为 commitizen 的适配器，已有对应的工具包为 "),n("a",{attrs:{href:"https://www.npmjs.com/package/@commitlint/cz-commitlint",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("@commitlint/cz-commitlint")]),n("OutboundLink")],1),s._v("。")])]),s._v(" "),n("p",[s._v("这里以第二种选用 "),n("code",[s._v("@commitlint/cz-commitlint")]),s._v(" 为例：")]),s._v(" "),n("ul",[n("li",[s._v("安装"),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" @commitlint/cz-commitlint --save-dev\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])]),s._v(" "),n("li",[s._v("修改 "),n("code",[s._v("packages.json")]),s._v(" 中 commitizen 的配置"),n("div",{staticClass:"language-json line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"config"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"commitizen"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"path"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./node_modules/@commitlint/cz-commitlint"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])]),s._v(" "),n("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=e.exports},674:function(s,t,a){s.exports=a.p+"assets/img/npx-cz.c3650a8d.png"}}]);