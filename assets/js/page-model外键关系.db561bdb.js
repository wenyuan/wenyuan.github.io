(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{762:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"model-外键关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-外键关系"}},[s._v("#")]),s._v(" model 外键关系")]),s._v(" "),a("p",[s._v("多表关联是常见的需求之一，Django 提供了一组关系类型字段，用来表示模型与模型之间的关系：ForeignKey，ManyToMany，OneToOneField。")]),s._v(" "),a("h2",{attrs:{id:"外键-多对一-foreignkey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外键-多对一-foreignkey"}},[s._v("#")]),s._v(" 外键/多对一（ForeignKey）")]),s._v(" "),a("h3",{attrs:{id:"用法示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法示例"}},[s._v("#")]),s._v(" 用法示例")]),s._v(" "),a("p",[s._v("多对一的关系，通常被称为外键，"),a("strong",[s._v("需要定义在「多」的一方")]),s._v("。")]),s._v(" "),a("p",[s._v("外键需要两个位置参数，一个是关联的模型，另一个是 "),a("code",[s._v("on_delete")]),s._v("。在 Django2.0 版本后，"),a("code",[s._v("on_delete")]),s._v(" 属于必填参数。")]),s._v(" "),a("p",[s._v("下面是一个简单的例子：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Manufacturer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    manufacturer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Manufacturer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("多对一字段的变量名一般设置为关联的模型的小写单数，而多对多则一般设置为小写复数。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[s._v("在实际的数据库后台，Django 会为每一个外键添加 "),a("code",[s._v("_id")]),s._v(" 后缀，并以此创建数据表里的一列。在上面的工厂与车的例子中，Car 模型对应的数据表中，会有一列叫做 "),a("code",[s._v("manufacturer_id")]),s._v("。但实际上，在 Django 代码中我们不需要使用这个列名，除非是书写原生的 SQL 语句，一般我们都直接使用字段名 "),a("code",[s._v("manufacturer")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"参数说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数说明"}},[s._v("#")]),s._v(" 参数说明")]),s._v(" "),a("p",[s._v("外键还有一些参数，下面仅列举一些常见且重要的。")]),s._v(" "),a("h4",{attrs:{id:"_1-on-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-on-delete"}},[s._v("#")]),s._v(" 1. "),a("strong",[s._v("on_delete")])]),s._v(" "),a("p",[s._v("当一个外键关联的对象被删除时，Django 将模仿 "),a("code",[s._v("on_delete")]),s._v(" 参数定义的 SQL 约束执行相应操作。比如，你有一个可为空的外键，并且你想让它在关联的对象被删除时，自动设为 "),a("code",[s._v("null")]),s._v("，可以如下定义：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SET_NULL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    blank"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    null"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("该参数可选的值（全部为大写）都内置在 "),a("code",[s._v("django.db.models")]),s._v(" 中，包括：")]),s._v(" "),a("ul",[a("li",[s._v("CASCADE：模拟SQL语言中的 "),a("code",[s._v("ON DELETE CASCADE")]),s._v(" 约束，将定义有外键的模型对象同时删除。")]),s._v(" "),a("li",[s._v("PROTECT：阻止上面的删除操作，但是弹出 "),a("code",[s._v("ProtectedError")]),s._v(" 异常。")]),s._v(" "),a("li",[s._v("SET_NULL：将外键字段设为 "),a("code",[s._v("null")]),s._v("，只有当字段设置了 "),a("code",[s._v("null=True")]),s._v(" 时，方可使用该值。")]),s._v(" "),a("li",[s._v("SET_DEFAULT：将外键字段设为默认值。只有当字段设置了 "),a("code",[s._v("default")]),s._v(" 参数时，方可使用。")]),s._v(" "),a("li",[s._v("DO_NOTHING：什么也不做。")]),s._v(" "),a("li",[s._v("SET()：设置为一个传递给 SET() 的值或者一个回调函数的返回值。注意大小写。"),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("conf "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" settings\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("contrib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("auth "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" get_user_model\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_sentinel_user")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" get_user_model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_or_create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'deleted'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyModel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AUTH_USER_MODEL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("get_sentinel_user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[s._v("RESTRICT: Django3.1 新增。它与 PROTECT 不同，在大多数情况下，同样不允许删除，但是在某些特殊情况下，却是可以删除的。这个模式比较难以理解，目前想不到应用场景就先作为了解。")])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("这个参数在 Django2.0 之后，不可以省略了，需要显式的指定。这也是除了路由编写方式外，Django2 和 Django1.x 最大的不同点之一。")])]),s._v(" "),a("h4",{attrs:{id:"_2-related-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-related-name"}},[s._v("#")]),s._v(" 2. "),a("strong",[s._v("related_name")])]),s._v(" "),a("p",[s._v("这个参数很好用，用于关联对象反向引用模型的名称。以前面车和工厂的例子解释，就是从工厂反向关联到车的关系名称。")]),s._v(" "),a("p",[s._v("通常情况下，这个参数我们可以不设置，Django 会默认以模型的小写加上 "),a("code",[s._v("_set")]),s._v(" 作为反向关联名，比如对于工厂就是 "),a("code",[s._v("car_set")]),s._v("，如果你觉得 "),a("code",[s._v("car_set")]),s._v(" 还不够直观，可以如下定义：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    manufacturer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'production.Manufacturer'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      \n        on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        related_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'car_producted_by_this_manufacturer'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义一个反向关联名")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("以后获取一个工厂对象后，想获取到所有它所生产的汽车，就可以使用下面的方式了：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("maufacturer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Manufacturer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ncars "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" maufacturer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("car_producted_by_this_manufacturer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"_3-limit-choices-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-limit-choices-to"}},[s._v("#")]),s._v(" 3. "),a("strong",[s._v("limit_choices_to")])]),s._v(" "),a("p",[s._v("这个参数用于限制外键所能关联的对象，只能用于 Django 的 ModelForm（Django 的表单模块）和 Admin 后台，对其它场合无限制功能。它的值可以是一个字典、Q 对象或者一个返回字典或 Q 对象的函数调用。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样定义，则 ModelForm 的 staff_member 字段列表中，只会出现 is_staff=True 的 Users 对象，这一功能对于 Admin 后台非常有用")]),s._v("\nstaff_member "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    limit_choices_to"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'is_staff'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"_4-to-field"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-to-field"}},[s._v("#")]),s._v(" 4. "),a("strong",[s._v("to_field")])]),s._v(" "),a("p",[s._v("默认情况下，外键都是关联到被关联对象的主键上（一般为 "),a("code",[s._v("id")]),s._v("）。如果指定这个参数，可以关联到指定的字段上，但是该字段必须具有 "),a("code",[s._v("unique=True")]),s._v(" 属性，也就是具有唯一属性。")]),s._v(" "),a("h4",{attrs:{id:"_5-db-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-db-constraint"}},[s._v("#")]),s._v(" 5. "),a("strong",[s._v("db_constraint")])]),s._v(" "),a("p",[s._v("默认情况下，这个参数被设为 "),a("code",[s._v("True")]),s._v("，表示遵循数据库约束，这也是大多数情况下你的选择。")]),s._v(" "),a("p",[s._v("如果设为 False，那么将无法保证数据的完整性和合法性。除非在下面的场景中，才可能需要将它设置为 False：")]),s._v(" "),a("ul",[a("li",[s._v("有历史遗留的不合法数据，没办法的选择")]),s._v(" "),a("li",[s._v("你正在分割数据表")])]),s._v(" "),a("p",[s._v("当它为 False，并且你试图访问一个不存在的关系对象时，会抛出 DoesNotExist 异常。")]),s._v(" "),a("h2",{attrs:{id:"多对多-manytomanyfield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多-manytomanyfield"}},[s._v("#")]),s._v(" 多对多（ManyToManyField）")]),s._v(" "),a("h3",{attrs:{id:"用法示例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法示例-2"}},[s._v("#")]),s._v(" 用法示例")]),s._v(" "),a("p",[s._v("多对多关系在数据库中也是非常常见的关系类型。比如一本书可以有好几个作者，一个作者也可以写好几本书。")]),s._v(" "),a("p",[s._v("多对多的字段可以定义在任何的一方，不过最好定义在符合人们思维习惯的一方，但不要同时都定义，只能选择一个模型设置该字段（比如我们通常将披萨上的配料字段放在披萨模型中，而不是在配料模型中放置披萨字段）。")]),s._v(" "),a("p",[s._v("下面是一个简单的例子：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Topping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pizza")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ...")]),s._v("\n    toppings "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ManyToManyField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Topping"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("一般建议为"),a("strong",[s._v("多对多字段名使用复数形式")]),s._v("。")]),s._v(" "),a("p",[s._v("多对多关系需要一个位置参数：关联的对象模型，其它用法和外键多对一基本类似。")]),s._v(" "),a("p",[s._v("在在数据库后台，Django 实际上会额外创建一张用于体现多对多关系的中间表。默认情况下，该表的名称是 "),a("code",[s._v("多对多字段名+包含该字段的模型名+一个独一无二的哈希码")]),s._v("，例如 "),a("code",[s._v("author_books_9cdf4")]),s._v("，不过也可以通过 "),a("code",[s._v("db_table")]),s._v(" 选项，自定义中间表的表名。")]),s._v(" "),a("h3",{attrs:{id:"参数说明-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数说明-2"}},[s._v("#")]),s._v(" 参数说明")]),s._v(" "),a("h4",{attrs:{id:"_1-related-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-related-name"}},[s._v("#")]),s._v(" 1. "),a("strong",[s._v("related_name")])]),s._v(" "),a("p",[s._v("参考外键的相同参数。")]),s._v(" "),a("h4",{attrs:{id:"_2-limit-choices-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-limit-choices-to"}},[s._v("#")]),s._v(" 2. "),a("strong",[s._v("limit_choices_to")])]),s._v(" "),a("p",[s._v("参考外键的相同参数。但是对于使用 "),a("code",[s._v("through")]),s._v(" 参数自定义中间表的多对多字段无效。")]),s._v(" "),a("h4",{attrs:{id:"_3-through"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-through"}},[s._v("#")]),s._v(" 3. "),a("strong",[s._v("through")])]),s._v(" "),a("p",[s._v("用于自定义多对多关系的那张额外的中间表，参数的值为一个中间模型。")]),s._v(" "),a("p",[s._v("最常见的使用场景是你需要为多对多关系添加额外的数据，比如添加两个人建立 QQ 好友关系的时间。")]),s._v(" "),a("p",[s._v("下面是一个简单的例子：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CharField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("max_length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CharField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("max_length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    members "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ManyToManyField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        through"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Membership'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义中间表")]),s._v("\n        through_fields"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'group'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'person'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这就是具体的中间表模型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Membership")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    group "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    person "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    inviter "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ForeignKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        related_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"membership_invites"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    invite_reason "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CharField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("max_length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("上面的代码中，定义了一个新的模型 "),a("code",[s._v("Membership")]),s._v("，用来保存 "),a("code",[s._v("Person")]),s._v(" 和 "),a("code",[s._v("Group")]),s._v(" 模型的多对多关系，并且同时增加了「邀请人」和「邀请原因」的字段。")]),s._v(" "),a("h4",{attrs:{id:"_4-through-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-through-fields"}},[s._v("#")]),s._v(" 4. "),a("strong",[s._v("through_fields")])]),s._v(" "),a("p",[s._v("上面的例子中，就用到了这个参数。可以看到作为多对多关系的中间表，本质上 "),a("code",[s._v("Membership")]),s._v(" 模型中是包含了两个 ForeignKey 外键（"),a("code",[s._v("group")]),s._v(" 和 "),a("code",[s._v("person")]),s._v("），也就是说，中间表的作用是把两个多对一关系衔接起来，实现多对多关系。")]),s._v(" "),a("p",[s._v("但在上面的自定义中间表模型中，关联 Person 模型的外键有两个（"),a("code",[s._v("person")]),s._v(" 和 "),a("code",[s._v("inviter")]),s._v("），Django 无法确定到底使用哪个作为和 Group 关联的对象。所以，在这个例子中，必须显式的指定 "),a("code",[s._v("through_fields")]),s._v(" 参数，用于定义关系。")]),s._v(" "),a("p",[a("code",[s._v("through_fields")]),s._v(" 参数接收一个二元元组，它指定了从中间表模型 "),a("code",[s._v("Membership")]),s._v(" 中选择哪两个字段，作为关系连接字段。")]),s._v(" "),a("h4",{attrs:{id:"_5-db-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-db-table"}},[s._v("#")]),s._v(" 5. "),a("strong",[s._v("db_table")])]),s._v(" "),a("p",[s._v("设置中间表的名称。不指定的话，则使用默认值。")]),s._v(" "),a("h4",{attrs:{id:"_6-db-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-db-constraint"}},[s._v("#")]),s._v(" 6. "),a("strong",[s._v("db_constraint")])]),s._v(" "),a("p",[s._v("参考外键的相同参数。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("ul",[a("li",[s._v("ManyToManyField 多对多字段不支持 Django 内置的 validators 验证功能。")]),s._v(" "),a("li",[s._v("null 参数对 ManyToManyField 多对多字段无效，所以设置 "),a("code",[s._v("null=True")]),s._v(" 毫无意义。")])])]),s._v(" "),a("h2",{attrs:{id:"一对一-onetoonefield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一-onetoonefield"}},[s._v("#")]),s._v(" 一对一（OneToOneField）")]),s._v(" "),a("h3",{attrs:{id:"用法示例-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法示例-3"}},[s._v("#")]),s._v(" 用法示例")]),s._v(" "),a("p",[s._v("这种关系类型一般用于某张表的补充。比如使用了 Django 自带的 User 用户表，但是想要在原来的模型的基础上添加新的字段，那么就可以使用一对一外键的方式，定义一个用户的扩展模型。")]),s._v(" "),a("p",[s._v("下面是一个简单的例子：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("contrib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("models "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" User\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserExtension")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("OneToOneField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" on_delete"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CASCADE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" related_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'extension'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    school "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" models"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CharField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("max_length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("因为设置了级联删除，所以当某个 User 对象被删除后，与之相关联的 UserExtension 对象也会被删除。")]),s._v(" "),a("p",[s._v("简单理解，OneToOneField 与声明了 "),a("code",[s._v("unique=True")]),s._v(" 的 ForeignKey 非常相似，不同的是使用反向关联的时候，得到的不是一个对象列表，而是一个单独的对象。")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("对于 Django2.0 及以上的版本，在使用 OneToOneField 和 ForeignKey 时，需要加上 "),a("code",[s._v("on_delete")]),s._v(" 参数。")])]),s._v(" "),a("h3",{attrs:{id:"参数说明-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数说明-3"}},[s._v("#")]),s._v(" 参数说明")]),s._v(" "),a("p",[s._v("OneToOneField（一对一关系）拥有和 ForeignKey（多对一外键关系）一样的额外可选参数，只是多了一个不常用的 "),a("code",[s._v("parent_link")]),s._v(" 参数。")]),s._v(" "),a("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=e.exports}}]);