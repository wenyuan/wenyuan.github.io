(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{787:function(s,t,n){"use strict";n.r(t);var a=n(1),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"py2-和-py3-语法特性区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#py2-和-py3-语法特性区别"}},[s._v("#")]),s._v(" Py2 和 Py3 语法特性区别")]),s._v(" "),n("blockquote",[n("p",[s._v("记录升级项目时遇到的语法特性区别。")])]),s._v(" "),n("h2",{attrs:{id:"移除了-unicode-和-long-这两种数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移除了-unicode-和-long-这两种数据类型"}},[s._v("#")]),s._v(" 移除了 unicode 和 long 这两种数据类型")]),s._v(" "),n("ul",[n("li",[s._v("整数类型的统一\n"),n("ul",[n("li",[s._v("在 Python 2 中，整数类型分为两种：普通整数（"),n("code",[s._v("int")]),s._v("）和长整数（"),n("code",[s._v("long")]),s._v("）。当需要处理超过 "),n("code",[s._v("int")]),s._v(" 类型范围的整数时，会自动转换为 "),n("code",[s._v("long")]),s._v(" 类型。")]),s._v(" "),n("li",[s._v("在 Python 3 中，将这两种整数类型进行了统一，只保留了 "),n("code",[s._v("int")]),s._v(" 类型。")])])]),s._v(" "),n("li",[s._v("字符串类型的统一\n"),n("ul",[n("li",[s._v("在 Python 2 中，字符串分为两种类型：普通字符串（"),n("code",[s._v("str")]),s._v("）和 Unicode 字符串（"),n("code",[s._v("unicode")]),s._v("）。")]),s._v(" "),n("li",[s._v("在 Python 3 中，字符串默认采用 Unicode 编码，因此不需要显式地判断字符串是否为 Unicode 类型。即在Python 3中，所有的字符串都是 Unicode 类型。")])])])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的写法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("time_offset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("long")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("camel_format"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("unicode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的写法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("time_offset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("camel_format"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"关于一些库返回的文本信息编码解码问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于一些库返回的文本信息编码解码问题"}},[s._v("#")]),s._v(" 关于一些库返回的文本信息编码解码问题")]),s._v(" "),n("p",[s._v("比如 "),n("code",[s._v("requests")]),s._v(" 库返回的响应内容，因为出于数据的完整性和灵活性等考虑，这些数据都是以二进制数据的形式传递的。")]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，"),n("code",[s._v("str")]),s._v(" 类型可以同时用于表示文本字符串和二进制数据，统称字节串（byte string）， "),n("code",[s._v("unicode")]),s._v(" 类型表示文本字符串。这种设计在处理文本和二进制数据时容易引起混淆，因为 "),n("code",[s._v("str")]),s._v(" 类型可以同时表示文本和二进制数据。")]),s._v(" "),n("li",[s._v("在 Python3 中，"),n("code",[s._v("str")]),s._v(" 类型被设计为用来表示文本字符串（默认采用 Unicode 编码），而 "),n("code",[s._v("bytes")]),s._v(" 类型则专门用来表示字节串（byte string），即二进制数据。这样明确的区分就让代码更加清晰了。")])]),s._v(" "),n("p",[s._v("于是这个重大的改变就让我们在使用 "),n("code",[s._v("requests")]),s._v(" 这类库时，对响应内容的处理略有不同了。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" requests\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的写法")]),s._v("\nres "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'key'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'value'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("content"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：<type 'str'>")]),s._v("\ncontent "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("content\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" content"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lower"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的写法")]),s._v("\nres "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" requests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" data"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'key'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'value'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("content"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：<class 'bytes'>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按原来的代码会报错：TypeError: a bytes-like object is required, not 'str'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要将 bytes 类型的响应内容转换为字符串，可以通过指定字符编码进行解码")]),s._v("\ncontent "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("content"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("decode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'utf-8'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" content"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lower"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h2",{attrs:{id:"字典的有序性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字典的有序性"}},[s._v("#")]),s._v(" 字典的有序性")]),s._v(" "),n("ul",[n("li",[s._v("在 Python2 中字典是无序的数据结构，如果需要创建有序字典得借助 "),n("code",[s._v("from collections import OrderedDict")]),s._v("。")]),s._v(" "),n("li",[s._v("在 Python3（实际上是 Python3.7）以后字典是有序的，字典的插入顺序和修改顺序被保留。")])]),s._v(" "),n("h2",{attrs:{id:"map-方法的不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-方法的不同"}},[s._v("#")]),s._v(" map 方法的不同")]),s._v(" "),n("p",[s._v("在 Python 2 中，map 函数会返回一个列表，其中包含了将函数应用于迭代器中每个元素后得到的结果。但是在 Python 3 中，map 函数的行为发生了变化，它现在返回的是一个迭代器，而不是一个列表。")]),s._v(" "),n("p",[s._v("因此，如果你在 Python 3 中运行 map(register_fields, [SnmpTS]) 这行代码，它不会像在 Python 2 中那样直接返回一个列表。如果你想要在 Python 3 中获得与 Python 2 相同的结果，可以使用 list 函数将 map 函数返回的迭代器转换为列表。例如：")]),s._v(" "),n("div",{staticClass:"language-python3 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("result = list(map(register_fields, [SnmpTS]))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("上面这行代码会将 register_fields 函数应用于列表 [SnmpTS] 中的每个元素，并将结果存储在一个列表中。这样你就可以在 Python 3 中获得与 Python 2 中相同的结果。")]),s._v(" "),n("h2",{attrs:{id:"filter-函数返回值的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter-函数返回值的区别"}},[s._v("#")]),s._v(" filter 函数返回值的区别")]),s._v(" "),n("blockquote",[n("p",[s._v("报错信息："),n("br"),s._v("\nobject of type 'filter' has no len()\nObject of type filter is not JSON serializable")])]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，filter 返回的是一个 list，可以直接使用它。")]),s._v(" "),n("li",[s._v("在 Python 3 中，filter 返回的是一个 filter 对象，同样的需求应该将 filter 转换成 list 再使用。")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的用法")]),s._v("\nq "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：2，4，6，8")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的用法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同样的代码输出：<filter object at 0x7f5e4661dcc0>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 应该将 filter 转换成 list")]),s._v("\nq "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("由于业务上经常碰到「统计 filter 后结果集的个数」这种需求场景，正是因为这种变动，使得现在写代码时，可以考虑一些优化。")]),s._v(" "),n("ul",[n("li",[s._v("在结果集较小的时候，先将结果集转换成 list 对象然后调用 "),n("code",[s._v("len()")]),s._v(" 函数进行统计，这种方式对性能的影响不大。")]),s._v(" "),n("li",[s._v("但当结果集较大的情况下，将 "),n("code",[s._v("filter()")]),s._v(" 函数的结果转换为列表可能会牺牲性能，因为在转换为列表时需要创建一个新的列表对象，再遍历原始数据集并复制满足条件的元素到新列表中。此时不妨用 "),n("code",[s._v("sum()")]),s._v(" 函数来更高效地统计结果数量。")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 优化前")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 创建一个新列表")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 遍历原始数据集，将满足条件的元素添加到新列表中")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 返回新列表的长度")]),s._v("\ncount "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 优化后")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 遍历原始数据集，对满足条件的元素计数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 返回计数结果")]),s._v("\ncount "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" elem "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("还有一种业务常见的使用场景，就是获取过滤后的第一个值：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nfiltered_numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的写法")]),s._v("\nfirst_number "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" filtered_numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" filtered_numbers "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的写法 1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 转成 list 后跟 python2 一样用，显然在大数据量的时候性能较差")]),s._v("\nfirst_number "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filtered_numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filtered_numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的写法 2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 next 获取迭代器下一个数据，并且从数据集中移除该数据。当没有数据时会抛出错误 `StopIteration`。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要注意不能用 `if filtered_numbers` 来判断过滤后是否是空数据集，因为 filter 对象恒返回 True")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 需要注意 next 调用前不能使用类似 list(filtered_numbers) 方法，因为一旦调用这个方法，就相当于是对数据集执行了一次完整迭代操作，下一次 next 必然就报错了")]),s._v("\nfirst_number "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filtered_numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的写法 2 优化")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 即设置 next 的第二参数，当遇到 `StopIteration` 时指定默认值，不抛出错误")]),s._v("\nfirst_number "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filtered_numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h2",{attrs:{id:"range-函数返回值的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#range-函数返回值的区别"}},[s._v("#")]),s._v(" range 函数返回值的区别")]),s._v(" "),n("blockquote",[n("p",[s._v("报错信息："),n("br"),s._v("\nunsupported operand type(s) for +: 'range' and 'range'")])]),s._v(" "),n("p",[s._v("Python2 和 Python3 的 range 函数返回结果不一样：")]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，直接返回一个列表了。")]),s._v(" "),n("li",[s._v("在 Python 3 中，返回值变成了一个可迭代对象。可以直接遍历，也可以根据需要将其转为其他的可迭代数据结构。")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的用法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [2, 3, 4]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的用法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# range(2, 5) --- <class 'range'>")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [2, 3, 4]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"字典的-keys-方法返回结果不一样"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字典的-keys-方法返回结果不一样"}},[s._v("#")]),s._v(" 字典的.keys() 方法返回结果不一样")]),s._v(" "),n("p",[s._v("Python2 和 Python3 的字典 "),n("code",[s._v(".keys()")]),s._v(" 方法返回不一样：")]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，字典的 "),n("code",[s._v(".keys()")]),s._v(" 方法返回一个所有键的列表。")]),s._v(" "),n("li",[s._v("在 Python 3 中，字典的 .keys() 方法返回一个 "),n("code",[s._v("dict_keys")]),s._v(" 对象，它是一个类似于集合的可迭代对象，可以用来迭代字典中的键。")])]),s._v(" "),n("p",[s._v("由于 "),n("code",[s._v("dict_keys")]),s._v(" 对象不是 JSON 可序列化的类型，因此不能直接使用 "),n("code",[s._v("json.dumps()")]),s._v(" 函数将其序列化为 JSON 字符串，而是应该先将 "),n("code",[s._v("dict_keys")]),s._v(" 对象转换为列表，然后再进行序列化。例如：")]),s._v(" "),n("div",{staticClass:"language-python3 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import json\n\ndic = {'a': 1, 'b': 2, 'c': 3}\ndic_keys = dic.keys()\n# 将可迭代对象转为列表\ndic_keys_list = list(dic_keys)\njson_str = json.dumps(dic_keys_list)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("因此所有设计到这种用法的代码都需要增加 "),n("code",[s._v("list()")]),s._v(" 转换（比如 ES 的 ORM，像 "),n("code",[s._v("terms")]),s._v(" 这种查询语法在转成 DSL 后会以列表的形式发送给服务端，但返回的报错信息提示有限）")]),s._v(" "),n("p",[s._v("同理，字典的 "),n("code",[s._v(".items")]),s._v(" 和 "),n("code",[s._v(".values()")]),s._v(" 方法现在均返回迭代器，如果需要当列表使用，需要进行转换。")]),s._v(" "),n("h2",{attrs:{id:"迭代字典时禁止更改字典的大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代字典时禁止更改字典的大小"}},[s._v("#")]),s._v(" 迭代字典时禁止更改字典的大小")]),s._v(" "),n("blockquote",[n("p",[s._v("报错信息："),n("br"),s._v("\nRuntimeError: dictionary changed size during iteration")])]),s._v(" "),n("p",[s._v("在迭代字典时更改字典大小，Python2 不会报错，但是可能会引发一些问题（比如迭代器可能会丢失或重复访问某些元素），Python 会直接抛出这个错误。")]),s._v(" "),n("p",[s._v("Python3 处理这种需求的两种常见方式：")]),s._v(" "),n("div",{staticClass:"language-python3 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 创建一个字典键的副本并在副本上迭代，而不是在原始字典上迭代\n# 迭代 keys，而不是 obj.keys()\nkeys = list(obj.keys())\n\n# 创建一个新的带有所需更改的字典，而不是在迭代原始字典时修改它。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("总之，不管是在 Python 2 还是 Python 3 中，都不建议在迭代字典时更改字典大小。")]),s._v(" "),n("h2",{attrs:{id:"commands-模块被废弃"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commands-模块被废弃"}},[s._v("#")]),s._v(" commands 模块被废弃")]),s._v(" "),n("p",[s._v("在 Python 3 中，"),n("code",[s._v("commands")]),s._v(" 模块已经被废弃并移除，因此无法在 Python 3 中使用。如果想执行命令行操作，可以使用 "),n("code",[s._v("subprocess")]),s._v(" 模块来代替。")]),s._v(" "),n("p",[s._v("具体用法看代码，之前几个地方我已经用 "),n("code",[s._v("subprocess")]),s._v(" 模块来实现的了。")]),s._v(" "),n("h2",{attrs:{id:"在字符串和-unicode-处理方面的差异"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在字符串和-unicode-处理方面的差异"}},[s._v("#")]),s._v(" 在字符串和 Unicode 处理方面的差异")]),s._v(" "),n("p",[s._v("在 Python 3 中，"),n("code",[s._v("str")]),s._v(" 类型已经支持 Unicode 编码，因此不再需要单独的 "),n("code",[s._v("unicode")]),s._v(" 类型。")]),s._v(" "),n("blockquote",[n("p",[s._v("现在字符串只有 "),n("code",[s._v("str")]),s._v(" 一种类型，但它跟 2.x 版本的 "),n("code",[s._v("unicode")]),s._v(" 几乎一样。")])]),s._v(" "),n("p",[s._v("其中一个影响：")]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，"),n("code",[s._v("json.loads()")]),s._v(" 函数会将 JSON 字符串解析为 Python 字典，并将所有字符串值转换为 "),n("code",[s._v("unicode")]),s._v(" 类型。")]),s._v(" "),n("li",[s._v("在 Python 3 中，"),n("code",[s._v("json.loads()")]),s._v(" 函数会将 JSON 字符串解析为 Python 字典，并将所有字符串值保留为 "),n("code",[s._v("str")]),s._v(" 类型。")])]),s._v(" "),n("h2",{attrs:{id:"列表-sort-参数的变化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表-sort-参数的变化"}},[s._v("#")]),s._v(" 列表.sort() 参数的变化")]),s._v(" "),n("blockquote",[n("p",[s._v("报错信息："),n("br"),s._v("\ndimension_cmp() missing 1 required positional argument: 'b'")])]),s._v(" "),n("ul",[n("li",[s._v("Python2："),n("code",[s._v("列表.sort(cmp=None, key=None, reverse=False)")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("cmp")]),s._v(" 接受一个比较函数 func，该函数有两个参数，通过对这两个参数的比较，返回负值为小于，如果它们相等则返回零，或者返回正为大于。")]),s._v(" "),n("li",[n("code",[s._v("key")]),s._v(" 接受一个函数 func，传入 func 的参数是列表的元素，它接受一个参数并返回一个用于排序的键，也就是说是根据列表元素经过 func 处理后的结果进行排序。")]),s._v(" "),n("li",[n("code",[s._v("reverse")]),s._v("：接受布尔值，为 "),n("code",[s._v("True")]),s._v(" 时表示降序排序。")])])]),s._v(" "),n("li",[s._v("Python3："),n("code",[s._v("列表.sort(key=None, reverse=False)")]),s._v(" "),n("ul",[n("li",[s._v("取消了 "),n("code",[s._v("cmp")]),s._v(" 参数，但是可以构造排序函数传递给 "),n("code",[s._v("key")]),s._v(" 来实现。")])])])]),s._v(" "),n("p",[s._v("Python2 的写法：")]),s._v(" "),n("div",{staticClass:"language-python2 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 用 key 参数\nmy_list = ["bb", "a", "dddd", "ccc"]\nmy_list.sort(key=lambda x: len(x))\nprint(my_list)\n\n# 用 cmp 参数\ndef compare_length(x, y):\n    return len(x) - len(y)\nmy_list = ["bb", "a", "dddd", "ccc"]\nmy_list.sort(cmp=compare_length)\nprint(my_list)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("Python3 的写法：")]),s._v(" "),n("div",{staticClass:"language-python3 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 用 key 参数（同 Python2）\nmy_list = ["bb", "a", "dddd", "ccc"]\nmy_list.sort(key=lambda x: len(x))\nprint(my_list)\n\n# 像 cmp 那样传递两个参数给比较函数\n# 从 functools 导入 cmp_to_key() 方法，改造排序函数让其可以传递给 key 参数\nfrom functools import cmp_to_key\ndef compare_length(x, y):\n    return len(x) - len(y)\nmy_list = ["bb", "a", "dddd", "ccc"]\nmy_list.sort(key=cmp_to_key(compare_length))\nprint(my_list)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("code",[s._v("functools.cmp_to_key()")]),s._v(" 函数接受一个比较函数作为参数，返回一个键函数，该键函数接受单个参数并返回一个可供排序使用的关键字值。这样就可以在 "),n("code",[s._v("key")]),s._v(" 参数中使用转换后的键函数，并实现类似于 "),n("code",[s._v("cmp")]),s._v(" 的比较效果了。")]),s._v(" "),n("h2",{attrs:{id:"整数和空值-none-之间的比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整数和空值-none-之间的比较"}},[s._v("#")]),s._v(" 整数和空值（None）之间的比较")]),s._v(" "),n("blockquote",[n("p",[s._v("报错信息："),n("br"),s._v("\nTypeError: '<' not supported between instances of 'int' and 'NoneType'")])]),s._v(" "),n("ul",[n("li",[s._v("在 Python 2 中，对整数和空值进行比较时，空值 "),n("code",[s._v("None")]),s._v(" 被视为小于任何整数（包括 0 和 负数）。")]),s._v(" "),n("li",[s._v("在 Python 3 中，由于引入了更严格的类型检查，在对不兼容类型进行比较时会引发 "),n("code",[s._v("TypeError")]),s._v(" 异常。")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\ny "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x 小于 y"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x 大于等于 y"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# python2 会返回 "x 大于等于 y"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 会报错")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"除法的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#除法的区别"}},[s._v("#")]),s._v(" 除法的区别")]),s._v(" "),n("ul",[n("li",[s._v("在 Python2 中：\n"),n("ul",[n("li",[n("code",[s._v("/")]),s._v("：整数相除，向下取整；浮点数相除，结果包含小数（因此对于 "),n("code",[s._v("1/2")]),s._v(" 如果想保留小数应该写成 "),n("code",[s._v("1.0/2")]),s._v(" 或者 "),n("code",[s._v("1*1.0/2")]),s._v("）。")]),s._v(" "),n("li",[n("code",[s._v("//")]),s._v("：整数相除，与 "),n("code",[s._v("/")]),s._v(" 相同；浮点数相除，只返回整数部分，小数部分取零。")]),s._v(" "),n("li",[n("code",[s._v("%")]),s._v("：取余。")])])]),s._v(" "),n("li",[s._v("在 Python3 中：\n"),n("ul",[n("li",[n("code",[s._v("/")]),s._v("："),n("strong",[s._v("整数相除，也包含小数")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("//")]),s._v("："),n("strong",[s._v("不管结果中有没有小数，去掉小数取整")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("%")]),s._v("：取余。")])])])]),s._v(" "),n("p",[s._v("因此，当用 Python3 写代码时，对于两个整数相除仍旧希望得到整数的场景，需要使用双斜杠 "),n("code",[s._v("//")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"列表推导式对变量作用域的处理不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表推导式对变量作用域的处理不同"}},[s._v("#")]),s._v(" 列表推导式对变量作用域的处理不同")]),s._v(" "),n("ul",[n("li",[s._v("在 Python2 中：列表推导式并没有创建一个新的局部作用域。如果在列表推导式中使用了一个与外部作用域中同名的变量，那么这个变量的值会在列表推导式执行后被改变。")]),s._v(" "),n("li",[s._v("在 Python3 中：列表推导式会创建一个新的局部作用域。在列表推导式中使用的变量不会影响到外部作用域中的同名变量。")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python2 的现象")]),s._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：4")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 的现象")]),s._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：1")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"类型提示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型提示"}},[s._v("#")]),s._v(" 类型提示")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("这是 Python 3.5、3.6 新增的两个特性 "),n("a",{attrs:{href:"https://peps.python.org/pep-0484/",target:"_blank",rel:"noopener noreferrer"}},[s._v("PEP 484"),n("OutboundLink")],1),s._v(" 和 "),n("a",{attrs:{href:"https://peps.python.org/pep-0526/",target:"_blank",rel:"noopener noreferrer"}},[s._v("PEP 526"),n("OutboundLink")],1),s._v("，帮助 IDE 为我们提供更智能的提示。")]),s._v(" "),n("li",[s._v("这些新特性不会影响语言本身，只是增加一点提示。也就是说，假设变量标注了类型，传错了并不会报错，但是会有 warning，是 IDE 的智能语法提示。所以这个类型提示更像是一个规范约束，并不是一个语法限制。")])])]),s._v(" "),n("p",[s._v("简单数据类型：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python2 的写法")]),s._v("\nage "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("\nname "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),s._v("\nsex "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\nweight "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("52.5")]),s._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('b"moon"')]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python3 的写法")]),s._v("\nage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("\nname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张三'")]),s._v("\nsex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\nweight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("52.5")]),s._v("\nx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bytes")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('b"moon"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("复杂数据类型：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python2 的写法")]),s._v("\nitems_l "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Python'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Java'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Go'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nitems_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nitems_s "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nitems_d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'score'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python3 的写法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" typing "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Tuple"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Dict\n\nitems_l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Python'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Java'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Go'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 元组的方括号里面不加 ... 的话，IDE 会有一个 warning 提示")]),s._v("\nitems_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Tuple"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nitems_s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一个声明所有键的类型，第二个声明所有值的类型")]),s._v("\nitems_d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'score'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("函数参数与返回值：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python2 的写法")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n    这是一个加法运算函数\n    :param a: int 加数\n    :param b: int 加数\n    :return: int 两数相加之和\n    """')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python3 的写法（无需在注释里说明参数类型了）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n    这是一个加法运算函数\n    :param a: 加数\n    :param b: 加数\n    :return: 两数相加之和\n    """')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("类作为类型：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_person_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("one_person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" one_person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"异步编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[s._v("#")]),s._v(" 异步编程")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("Python 3.4 版本引入的协程，需要借助 "),n("code",[s._v("asyncio")]),s._v(" 库。")]),s._v(" "),n("li",[s._v("Python 3.5 版本引入的 "),n("code",[s._v("await/async")]),s._v(" 关键字（语法糖），不再需要使用回调函数或者协程来实现异步编程，因此异步代码的编写更方便了。\n"),n("ul",[n("li",[s._v("在函数定义前面加上"),n("code",[s._v("async")]),s._v(" 关键字，使它变成一个协程函数，调用该函数就会返回一个协程对象。")]),s._v(" "),n("li",[s._v("在函数内部使用 "),n("code",[s._v("await")]),s._v(" 关键字来等待异步操作的完成。")]),s._v(" "),n("li",[s._v("可以在协程函数中使用其他的协程或异步函数。")])])])])]),s._v(" "),n("p",[s._v("不过需要注意异步代码会让代码整体变得较难维护和理解，视场景而定，在需要编写单线程异步代码的时候可以使用。")]),s._v(" "),n("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=e.exports}}]);